#+title: Tajikistan poliomyelitis analysis
#+author: Alexander E. Zarebski

- Look at these [[file:./doc/model.org][notes]] for material relating to the model.
- Look at these [[file:./doc/readme.org][notes]] for material relating to the manuscript.
- The [[*How to run the code]] section explains how to run the code.
- *IMPORTANT* there is a [[file:./config.xml][configuration]] file for the analysis.
- There is a [[file:./snakefile][snakefile]] which coordinates this analysis.

* TODO Sub-sampling analysis

The goal here is to replicate the analysis but with sub-samples of the
time series data to gain some insight into the value provided by that
data source.

- [X] Document how to actually run this project!
- [X] Generate new versions of the =disaster-strings.txt= file with
  the sub-sampling.
  - This file is generated by =preprocessing-2.R=.
  - [X] Add subsampling configuration to =config.xml= so there is one
    source of truth for variables.
  - [X] Make a =preprocessing-3-subsampling.R= to generate the new
    data.
  - [X] Plot the new data by way of comparison.
  - [X] Incorporate all of this into the =snakefile=.
- [-] Generate new MCMC XML files which use the subsampled time
  series.
  - [X] The data is all stored in a JSON file so this should be
    do-able programmatically.
  - It is probably a good idea to scale down the initial condition for
    the observation probability and the prior distribution will need
    to be changed. The prior is a beta with natural parameters so
    should be okay to adjust.
  - [ ] Update the prior distributions so they form a consistent
    understanding of the process.
- [X] Set up a sensible way to run the MCMC chains (in parallel). It
  looks like this is currently expected to be done manually at the
  command line, but the build file has a helper function.
  - this will be managed by snakemake which should automatically run
    the chains in parallel if configured appropriately.
- [ ] Apply the same post-processing scripts to all of the chain
  outputs.
- [X] Generate figures comparing the reproduction number under each
  sub-sampling.
  - [X] Write the R script
  - [X] Incorporate this into the snakefile.
- [ ] Generate figures comparing the prevalence estimates for each
  sub-sampling.
  - [ ] Write the R script
  - [ ] Incorporate this into the snakefile.

* Data

- Figure [[fig:data-plot]] is produced by [[file:./R/preprocessing-1.R]].

#+caption: Time series of the number of cases and sequences in each epidemiological week.
#+name: fig:data-plot
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./out/manuscript/data-plot.png]]

* Results

- [[file:./out/disaster-strings.txt][This file]] containing the strings used to describe the time series in the XML is produced by [[file:./R/preprocessing-2.R]].
- [[file:./out/timed-sequences.fasta][This file]] containing the timed sequences is produced by [[file:./R/preprocessing-2.R]].
- This [[file:./xml/timtam-2023-09-04.xml][BEAST2 XML]] was produced by BEAUti.
- Figure [[fig:estimates-plot]] is produced by [[file:./R/postprocessing-1.R]] and shows the reproduction number alongside previous estimates.
- Figure [[fig:data-and-estimates]] is produced by [[file:./R/postprocessing-1.R]].
- There are a couple of prior/posterior plots produced by [[file:./R/postprocessing-2.R]]
- A table summarising the [[file:./out/manuscript/parameter-estimates.tex][parameter estimates]] is produced by by [[file:./R/postprocessing-2.R]].
- *NOTE* that this uses the HDPI as computed by =bayestestR= for the credible intervals.

#+caption: The estimated reproduction number and previous estimates from Li /et al/ (2017).
#+name: fig:estimates-plot
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./out/manuscript/parameter-r-comparison.png]]

#+caption: The estimated quantities along with the time series data.
#+name: fig:data-and-estimates
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./out/manuscript/combined-2-plot.png]]

* How to run the code

1. Download the software using the =download-beast.sh= script.
2. Install =timtamslamR= with =Rscript -e "devtools::install_github('aezarebski/timtamslamR')"=
3. Run =snakemake= to run the whole computational pipeline (assuming
   you have already have the MCMC XML).
   - The results files will appear in =out/=.

** Making the MCMC XML

Unless you want to change something about how the data is preprocessed
or the model is specified, you will not need to consider these steps.
Note that the pre-processing is also run by the =snakefile=.

1. Run =Rscript preprocessing-1.R=
2. Run =Rscript preprocessing-2.R=
3. Use a combination of BEAUti (to get a template) and manual editing
   to produce the MCMC XML.

* FAQs

** While file generates file X?

Open the [[file:./snakefile]] and see which rule has the desired file as
output, then look at the script that is run by that rule to produce
it.

** Can I resume an MCMC that has been interrupted?

Yes, here is a snippet of an ANT build file that describes how to do
that.

#+begin_src xml
  <target name="mcmcresume"
	  description="Run the MCMC for another length of the chain. E.g., ant mcmcresume -DbeastXML=timtam-YYYY-MM-DD.xml -DstateFile=timtam-YYYY-MM-DD.xml.state">
    <echo>Resuming the MCMC sampler...</echo>
    <exec executable="sh">
      <arg path="lib/beast/bin/beast" />
      <arg line="-seed 1" />
      <arg line="-statefile ${stateFile}" />
      <arg line="-resume" />
      <arg path="${beastXML}" />
    </exec>
  </target>
#+end_src
